import{b as L}from"./index-wKRGC5oP.js";import{g as R,a as S}from"./_commonjsHelpers-IkB594pC.js";var u={exports:{}};const M={},B=Object.freeze(Object.defineProperty({__proto__:null,default:M},Symbol.toStringTag,{value:"Module"})),E=R(B),F="dotenv",P="16.4.7",U="Loads environment variables from .env file",C="lib/main.js",G="lib/main.d.ts",q={".":{types:"./lib/main.d.ts",require:"./lib/main.js",default:"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},W={"dts-check":"tsc --project tests/types/tsconfig.json",lint:"standard",pretest:"npm run lint && npm run dts-check",test:"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov",prerelease:"npm test",release:"standard-version"},J={type:"git",url:"git://github.com/motdotla/dotenv.git"},H="https://dotenvx.com",Q=["dotenv","env",".env","environment","variables","config","settings"],z="README.md",X="BSD-2-Clause",Z={"@types/node":"^18.11.3",decache:"^4.6.2",sinon:"^14.0.1",standard:"^17.0.0","standard-version":"^9.5.0",tap:"^19.2.0",typescript:"^4.8.4"},ee={node:">=12"},te={fs:!1},re={name:F,version:P,description:U,main:C,types:G,exports:q,scripts:W,repository:J,funding:H,keywords:Q,readmeFilename:z,license:X,devDependencies:Z,engines:ee,browser:te};var b;function ne(){if(b)return u.exports;b=1;var f={};const d=E,g=E,_=E,w=E,m=re.version,V=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;function O(e){const r={};let n=e.toString();n=n.replace(/\r\n?/mg,`
`);let s;for(;(s=V.exec(n))!=null;){const i=s[1];let t=s[2]||"";t=t.trim();const o=t[0];t=t.replace(/^(['"`])([\s\S]*)\1$/mg,"$2"),o==='"'&&(t=t.replace(/\\n/g,`
`),t=t.replace(/\\r/g,"\r")),r[i]=t}return r}function I(e){const r=D(e),n=c.configDotenv({path:r});if(!n.parsed){const o=new Error(`MISSING_DATA: Cannot parse ${r} for an unknown reason`);throw o.code="MISSING_DATA",o}const s=y(e).split(","),i=s.length;let t;for(let o=0;o<i;o++)try{const a=s[o].trim(),l=$(n,a);t=c.decrypt(l.ciphertext,l.key);break}catch(a){if(o+1>=i)throw a}return c.parse(t)}function T(e){console.log(`[dotenv@${m}][INFO] ${e}`)}function A(e){console.log(`[dotenv@${m}][WARN] ${e}`)}function h(e){console.log(`[dotenv@${m}][DEBUG] ${e}`)}function y(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:f.DOTENV_KEY&&f.DOTENV_KEY.length>0?f.DOTENV_KEY:""}function $(e,r){let n;try{n=new URL(r)}catch(a){if(a.code==="ERR_INVALID_URL"){const l=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw l.code="INVALID_DOTENV_KEY",l}throw a}const s=n.password;if(!s){const a=new Error("INVALID_DOTENV_KEY: Missing key part");throw a.code="INVALID_DOTENV_KEY",a}const i=n.searchParams.get("environment");if(!i){const a=new Error("INVALID_DOTENV_KEY: Missing environment part");throw a.code="INVALID_DOTENV_KEY",a}const t=`DOTENV_VAULT_${i.toUpperCase()}`,o=e.parsed[t];if(!o){const a=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${t} in your .env.vault file.`);throw a.code="NOT_FOUND_DOTENV_ENVIRONMENT",a}return{ciphertext:o,key:s}}function D(e){let r=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const n of e.path)d.existsSync(n)&&(r=n.endsWith(".vault")?n:`${n}.vault`);else r=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else r=g.resolve(process.cwd(),".env.vault");return d.existsSync(r)?r:null}function N(e){return e[0]==="~"?g.join(_.homedir(),e.slice(1)):e}function x(e){T("Loading env from encrypted .env.vault");const r=c._parseVault(e);let n=f;return e&&e.processEnv!=null&&(n=e.processEnv),c.populate(n,r,e),{parsed:r}}function k(e){const r=g.resolve(process.cwd(),".env");let n="utf8";const s=!!(e&&e.debug);e&&e.encoding?n=e.encoding:s&&h("No encoding is specified. UTF-8 is used by default");let i=[r];if(e&&e.path)if(!Array.isArray(e.path))i=[N(e.path)];else{i=[];for(const l of e.path)i.push(N(l))}let t;const o={};for(const l of i)try{const p=c.parse(d.readFileSync(l,{encoding:n}));c.populate(o,p,e)}catch(p){s&&h(`Failed to load ${l} ${p.message}`),t=p}let a=f;return e&&e.processEnv!=null&&(a=e.processEnv),c.populate(a,o,e),t?{parsed:o,error:t}:{parsed:o}}function j(e){if(y(e).length===0)return c.configDotenv(e);const r=D(e);return r?c._configVault(e):(A(`You set DOTENV_KEY but you are missing a .env.vault file at ${r}. Did you forget to build it?`),c.configDotenv(e))}function K(e,r){const n=Buffer.from(r.slice(-64),"hex");let s=Buffer.from(e,"base64");const i=s.subarray(0,12),t=s.subarray(-16);s=s.subarray(12,-16);try{const o=w.createDecipheriv("aes-256-gcm",n,i);return o.setAuthTag(t),`${o.update(s)}${o.final()}`}catch(o){const a=o instanceof RangeError,l=o.message==="Invalid key length",p=o.message==="Unsupported state or unable to authenticate data";if(a||l){const v=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw v.code="INVALID_DOTENV_KEY",v}else if(p){const v=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw v.code="DECRYPTION_FAILED",v}else throw o}}function Y(e,r,n={}){const s=!!(n&&n.debug),i=!!(n&&n.override);if(typeof r!="object"){const t=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw t.code="OBJECT_REQUIRED",t}for(const t of Object.keys(r))Object.prototype.hasOwnProperty.call(e,t)?(i===!0&&(e[t]=r[t]),s&&h(i===!0?`"${t}" is already defined and WAS overwritten`:`"${t}" is already defined and was NOT overwritten`)):e[t]=r[t]}const c={configDotenv:k,_configVault:x,_parseVault:I,config:j,decrypt:K,parse:O,populate:Y};return u.exports.configDotenv=c.configDotenv,u.exports._configVault=c._configVault,u.exports._parseVault=c._parseVault,u.exports.config=c.config,u.exports.decrypt=c.decrypt,u.exports.parse=c.parse,u.exports.populate=c.populate,u.exports=c,u.exports}var oe=ne();const se=S(oe);se.config();const le=L(({router:f})=>{const d="G-KN141HH496";f.afterEach(g=>{try{window.gtag&&window.gtag("config",d,{page_path:g.path,page_location:window.location.href,page_title:document.title})}catch(_){console.error("GA tracking error:",_)}}),console.error("GA tracking id:",d)});export{le as default};
